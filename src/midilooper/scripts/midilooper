#!/usr/bin/python2.7

# Copyright 2012-2014 Gilbert Romer

# This file is part of gmidilooper.

# gmidilooper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# gmidilooper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU Gneneral Public License
# along with gmidilooper.  If not, see <http://www.gnu.org/licenses/>.

from midilooper import MidiLooper

import pygtk
pygtk.require("2.0")
import gtk

import sys
import getopt

if __name__ == "__main__":
#     gtk.rc_parse_string("""
# style "midiseq_default_style"
# {
#         bg[NORMAL]        = "black"
#         fg[NORMAL]        = "white"
#         base[NORMAL]      = "black"
#         text[NORMAL]      = "dark green"
#         bg[PRELIGHT]      = "black"
#         fg[PRELIGHT]      = "white"
#         base[PRELIGHT]    = "black"
#         text[PRELIGHT]    = "dark green"
#         bg[ACTIVE]        = "black"
#         fg[ACTIVE]        = "white"
#         base[ACTIVE]      = "black"
#         text[ACTIVE]      = "dark green"
#         bg[INSENSITIVE]   = "black"
#         fg[INSENSITIVE]   = "white"
#         base[INSENSITIVE] = "black"
#         text[INSENSITIVE] = "dark green"
#         bg[SELECTED]      = "black"
#         fg[SELECTED]      = "white"
#         base[SELECTED]    = "black"
#         text[SELECTED]    = "dark green"
# }
# widget "*" style "midiseq_default_style"
# """)
#    gtk.rc_parse("")

    def usage():
        print """\
Usage:
midilooper [-h] [-a | -j] [-n NAME] [ [-f filepath] [-i filepath] | [filepath] ]

Options:
-h, --help
  Display this help.
-a, --alsa
  Enable alsa sequencer backend (default).
-j, --jack
  Enable jack backend.
-n, --name
  Set sequencer backend name.
-i, --import filepath
  Import midi file.
-f, --file filepath
  Import midi file.

FILENAME
  The midifile to load (unstable).
"""

    engine_type = None
    engine_name = "MidiLooper"
    file_name = None
    import_midi = False

    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   "hjan:i:f:",
                                   ["help",
                                    "jack",
                                    "alsa",
                                    "name=",
                                    "import=",
                                    "file="])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        sys.exit(1)
    if len(args) > 1:
        usage()
        sys.exit(1)
    elif len(args) == 1:
        file_name = args[0]

    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            usage()
            sys.exit()
        elif opt in ["-a", "--alsa"]:
            if engine_type:
                usage()
                sys.exit(1)
            engine_type = 0
        elif opt in ["-j", "--jack"]:
            if engine_type:
                usage()
                sys.exit(1)
            engine_type = 1
        elif opt in ["-f", "--file"]:
            if file_name:
                usage()
                sys.exit(1)
            file_name = arg
        elif opt in ["-n", "--name"]:
            engine_name = arg
        elif opt in ["-i", "--import"]:
            import_midi = True
            file_name = arg
        else:
            assert False, "Unhandled option"

    if not engine_type:
        engine_type = 0

    mlooper = MidiLooper(seq_name=engine_name, filename=file_name, engine_type=engine_type)
    if import_midi:
        output = mlooper.outputlist_frame.add_output("default")
        if output:
            mlooper.tracklist_frame.menu.set_output_all(output)
            mlooper.tracklist_frame.menu.set_loop_all((0, TRACK_MAX_LENGTH))
    gtk.main()
